=begin
#API Endpoints

#Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and its members within Tremendous, please see the Tremendous Organizational API.

The version of the OpenAPI document: 2
Contact: developers@tremendous.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module Tremendous
  class ListFundingSources200ResponseFundingSourcesInnerMeta
    # **Only exists for balance and commercial invoicing.**  For balance: available amount (in cents USD) For commercial invoicing: available credit amount calculated as (credit limit - outstanding balance) (in cents USD) 
    attr_accessor :available_cents

    # **Only available when `method` is set to `balance`.**  Funds that are already registered on your Tremendous account but which have not yet been deposited in your account (e.g. unpaid invoices) (in Cents USD). 
    attr_accessor :pending_cents

    # **Only exists for commercial invoicing.**  Available credit limit (in cents USD) 
    attr_accessor :credit_limit_cents

    # **Only available when `method` is set to `bank_account` or `credit_card`.**  Name of the holder of the bank account or credit_card 
    attr_accessor :accountholder_name

    # **Only available when `method` is set to `bank_account`.**  Is this a checking or savings account 
    attr_accessor :account_type

    # **Only available when `method` is set to `bank_account`.**  Name of the bank 
    attr_accessor :bank_name

    # **Only available when `method` is set to `bank_account`.**  Last 4 digits of the account number 
    attr_accessor :account_number_mask

    # **Only available when `method` is set to `bank_account`.**  Last 4 digits of the routing number 
    attr_accessor :account_routing_mask

    # **Only available when `method` is set to `bank_account`.**  Can refunds be deposited to this bank account 
    attr_accessor :refundable

    # **Only available when `method` is set to `credit_card`.**  Network of the credit card 
    attr_accessor :network

    # **Only available when `method` is set to `credit_card`.**  Last 4 digits of the credit card number 
    attr_accessor :last4

    # **Only available when `method` is set to `credit_card`.**  Is this credit card expired 
    attr_accessor :expired

    # **Only available when `method` is set to `credit_card`.**  Year part of card's expiration date 
    attr_accessor :year

    # **Only available when `method` is set to `credit_card`.**  Month part of card's expiration date 
    attr_accessor :month

    # **Only available when `method` is set to `bank_account` or `credit_card`.**  Point in time when the last order failed using this bank account or credit card as a funding source. 
    attr_accessor :last_payment_failed_at

    # **Only available when `method` is set to `invoice`.**  Type of invoice account (e.g., commercial, pro_forma, prefunding_only) 
    attr_accessor :invoice_type

    # **Only available when `method` is set to `invoice` and `invoice_type` is `commercial`.**  Billing interval for commercial invoice generation (e.g., daily, weekly, monthly, twice_monthly). Returns `null` for pro forma invoices. 
    attr_accessor :interval

    # **Only available when `method` is set to `invoice` and `invoice_type` is `commercial`.**  Day of the week when commercial invoices are generated (\"0\"=Sunday, \"1\"=Monday, etc.). Returns `null` for pro forma invoices. 
    attr_accessor :day_of_week

    # **Only available when `method` is set to `invoice`.**  Net payment terms in days (e.g., \"30\" for Net 30) 
    attr_accessor :net

    # **Only available when `method` is set to `invoice`.**  Company name for invoice billing 
    attr_accessor :company_name

    # **Only available when `method` is set to `invoice`.**  Primary billing address line 
    attr_accessor :address_1

    # **Only available when `method` is set to `invoice`.**  Secondary billing address line 
    attr_accessor :address_2

    # **Only available when `method` is set to `invoice`.**  Billing address city 
    attr_accessor :city

    # **Only available when `method` is set to `invoice`.**  Billing address state or province 
    attr_accessor :state

    # **Only available when `method` is set to `invoice`.**  Billing address postal code 
    attr_accessor :zip

    # **Only available when `method` is set to `invoice`.**  Contact phone number for billing 
    attr_accessor :phone

    # **Only available when `method` is set to `invoice`.**  Email addresses for invoice delivery (comma-separated) 
    attr_accessor :emails

    attr_accessor :failure_details

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'available_cents' => :'available_cents',
        :'pending_cents' => :'pending_cents',
        :'credit_limit_cents' => :'credit_limit_cents',
        :'accountholder_name' => :'accountholder_name',
        :'account_type' => :'account_type',
        :'bank_name' => :'bank_name',
        :'account_number_mask' => :'account_number_mask',
        :'account_routing_mask' => :'account_routing_mask',
        :'refundable' => :'refundable',
        :'network' => :'network',
        :'last4' => :'last4',
        :'expired' => :'expired',
        :'year' => :'year',
        :'month' => :'month',
        :'last_payment_failed_at' => :'last_payment_failed_at',
        :'invoice_type' => :'invoice_type',
        :'interval' => :'interval',
        :'day_of_week' => :'day_of_week',
        :'net' => :'net',
        :'company_name' => :'company_name',
        :'address_1' => :'address_1',
        :'address_2' => :'address_2',
        :'city' => :'city',
        :'state' => :'state',
        :'zip' => :'zip',
        :'phone' => :'phone',
        :'emails' => :'emails',
        :'failure_details' => :'failure_details'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'available_cents' => :'Integer',
        :'pending_cents' => :'Integer',
        :'credit_limit_cents' => :'Integer',
        :'accountholder_name' => :'String',
        :'account_type' => :'String',
        :'bank_name' => :'String',
        :'account_number_mask' => :'String',
        :'account_routing_mask' => :'String',
        :'refundable' => :'Boolean',
        :'network' => :'String',
        :'last4' => :'String',
        :'expired' => :'Boolean',
        :'year' => :'String',
        :'month' => :'String',
        :'last_payment_failed_at' => :'Time',
        :'invoice_type' => :'String',
        :'interval' => :'String',
        :'day_of_week' => :'String',
        :'net' => :'String',
        :'company_name' => :'String',
        :'address_1' => :'String',
        :'address_2' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'zip' => :'String',
        :'phone' => :'String',
        :'emails' => :'String',
        :'failure_details' => :'ListFundingSources200ResponseFundingSourcesInnerMetaFailureDetails'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'bank_name',
        :'last_payment_failed_at',
        :'interval',
        :'day_of_week',
        :'failure_details'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Tremendous::ListFundingSources200ResponseFundingSourcesInnerMeta` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Tremendous::ListFundingSources200ResponseFundingSourcesInnerMeta`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'available_cents')
        self.available_cents = attributes[:'available_cents']
      end

      if attributes.key?(:'pending_cents')
        self.pending_cents = attributes[:'pending_cents']
      end

      if attributes.key?(:'credit_limit_cents')
        self.credit_limit_cents = attributes[:'credit_limit_cents']
      end

      if attributes.key?(:'accountholder_name')
        self.accountholder_name = attributes[:'accountholder_name']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.key?(:'bank_name')
        self.bank_name = attributes[:'bank_name']
      end

      if attributes.key?(:'account_number_mask')
        self.account_number_mask = attributes[:'account_number_mask']
      end

      if attributes.key?(:'account_routing_mask')
        self.account_routing_mask = attributes[:'account_routing_mask']
      end

      if attributes.key?(:'refundable')
        self.refundable = attributes[:'refundable']
      end

      if attributes.key?(:'network')
        self.network = attributes[:'network']
      end

      if attributes.key?(:'last4')
        self.last4 = attributes[:'last4']
      end

      if attributes.key?(:'expired')
        self.expired = attributes[:'expired']
      end

      if attributes.key?(:'year')
        self.year = attributes[:'year']
      end

      if attributes.key?(:'month')
        self.month = attributes[:'month']
      end

      if attributes.key?(:'last_payment_failed_at')
        self.last_payment_failed_at = attributes[:'last_payment_failed_at']
      end

      if attributes.key?(:'invoice_type')
        self.invoice_type = attributes[:'invoice_type']
      end

      if attributes.key?(:'interval')
        self.interval = attributes[:'interval']
      end

      if attributes.key?(:'day_of_week')
        self.day_of_week = attributes[:'day_of_week']
      end

      if attributes.key?(:'net')
        self.net = attributes[:'net']
      end

      if attributes.key?(:'company_name')
        self.company_name = attributes[:'company_name']
      end

      if attributes.key?(:'address_1')
        self.address_1 = attributes[:'address_1']
      end

      if attributes.key?(:'address_2')
        self.address_2 = attributes[:'address_2']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'emails')
        self.emails = attributes[:'emails']
      end

      if attributes.key?(:'failure_details')
        self.failure_details = attributes[:'failure_details']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/[0-9]{4}/)
      if !@account_number_mask.nil? && @account_number_mask !~ pattern
        invalid_properties.push("invalid value for \"account_number_mask\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/[0-9]{4}/)
      if !@account_routing_mask.nil? && @account_routing_mask !~ pattern
        invalid_properties.push("invalid value for \"account_routing_mask\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/[0-9]{4}/)
      if !@last4.nil? && @last4 !~ pattern
        invalid_properties.push("invalid value for \"last4\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      account_type_validator = EnumAttributeValidator.new('String', ["checking", "savings"])
      return false unless account_type_validator.valid?(@account_type)
      return false if !@account_number_mask.nil? && @account_number_mask !~ Regexp.new(/[0-9]{4}/)
      return false if !@account_routing_mask.nil? && @account_routing_mask !~ Regexp.new(/[0-9]{4}/)
      network_validator = EnumAttributeValidator.new('String', ["MasterCard", "Amex", "JCB", "Diner's Club", "Visa", "Discover", "Laser", "Elo", "Maestro", "Solo"])
      return false unless network_validator.valid?(@network)
      return false if !@last4.nil? && @last4 !~ Regexp.new(/[0-9]{4}/)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_type Object to be assigned
    def account_type=(account_type)
      validator = EnumAttributeValidator.new('String', ["checking", "savings"])
      unless validator.valid?(account_type)
        fail ArgumentError, "invalid value for \"account_type\", must be one of #{validator.allowable_values}."
      end
      @account_type = account_type
    end

    # Custom attribute writer method with validation
    # @param [Object] account_number_mask Value to be assigned
    def account_number_mask=(account_number_mask)
      if account_number_mask.nil?
        fail ArgumentError, 'account_number_mask cannot be nil'
      end

      pattern = Regexp.new(/[0-9]{4}/)
      if account_number_mask !~ pattern
        fail ArgumentError, "invalid value for \"account_number_mask\", must conform to the pattern #{pattern}."
      end

      @account_number_mask = account_number_mask
    end

    # Custom attribute writer method with validation
    # @param [Object] account_routing_mask Value to be assigned
    def account_routing_mask=(account_routing_mask)
      if account_routing_mask.nil?
        fail ArgumentError, 'account_routing_mask cannot be nil'
      end

      pattern = Regexp.new(/[0-9]{4}/)
      if account_routing_mask !~ pattern
        fail ArgumentError, "invalid value for \"account_routing_mask\", must conform to the pattern #{pattern}."
      end

      @account_routing_mask = account_routing_mask
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(network)
      validator = EnumAttributeValidator.new('String', ["MasterCard", "Amex", "JCB", "Diner's Club", "Visa", "Discover", "Laser", "Elo", "Maestro", "Solo"])
      unless validator.valid?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{validator.allowable_values}."
      end
      @network = network
    end

    # Custom attribute writer method with validation
    # @param [Object] last4 Value to be assigned
    def last4=(last4)
      if last4.nil?
        fail ArgumentError, 'last4 cannot be nil'
      end

      pattern = Regexp.new(/[0-9]{4}/)
      if last4 !~ pattern
        fail ArgumentError, "invalid value for \"last4\", must conform to the pattern #{pattern}."
      end

      @last4 = last4
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          available_cents == o.available_cents &&
          pending_cents == o.pending_cents &&
          credit_limit_cents == o.credit_limit_cents &&
          accountholder_name == o.accountholder_name &&
          account_type == o.account_type &&
          bank_name == o.bank_name &&
          account_number_mask == o.account_number_mask &&
          account_routing_mask == o.account_routing_mask &&
          refundable == o.refundable &&
          network == o.network &&
          last4 == o.last4 &&
          expired == o.expired &&
          year == o.year &&
          month == o.month &&
          last_payment_failed_at == o.last_payment_failed_at &&
          invoice_type == o.invoice_type &&
          interval == o.interval &&
          day_of_week == o.day_of_week &&
          net == o.net &&
          company_name == o.company_name &&
          address_1 == o.address_1 &&
          address_2 == o.address_2 &&
          city == o.city &&
          state == o.state &&
          zip == o.zip &&
          phone == o.phone &&
          emails == o.emails &&
          failure_details == o.failure_details
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [available_cents, pending_cents, credit_limit_cents, accountholder_name, account_type, bank_name, account_number_mask, account_routing_mask, refundable, network, last4, expired, year, month, last_payment_failed_at, invoice_type, interval, day_of_week, net, company_name, address_1, address_2, city, state, zip, phone, emails, failure_details].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Tremendous.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
